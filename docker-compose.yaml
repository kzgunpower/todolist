networks:
  kafka-net:
    driver: bridge 
  my_network:
    driver: bridge
    

services:
  postgres:
    image: postgres:15.0
    networks:
      - my_network
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:latest
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
    volumes:
      - redis_data:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    networks:
      - kafka-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "zkServer.sh","status"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    networks:
      - kafka-net
    depends_on:
      - zookeeper
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "9092:9092"
  kafka-logger:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-logger
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - kafka-logs:/app/logs
    environment:
      LOG_LEVEL: "info"
      KAFKA_BROKERS: "kafka:9092"
      KAFKA_TOPIC: "logs"
    healthcheck:
      test: ["CMD", "curl","-f","http://localhost:8080/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - kafka-net

  db-service:
    build: ./db-service
    networks:
      - my_network
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy

  api-service:
    build: ./api-service
    networks:
      - my_network
      - kafka-net
    depends_on:
      db-service:
        condition: service_started
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      DB_SERVICE_URL: "http://db-service:8081"
      REDIS_ADDR: "redis:6379"
      KAFKA_BROKERS: "kafka:9092"


volumes:
  postgres_data:
  redis_data: